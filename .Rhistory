2*pt(t,n1+n2-2)
mean.diff = -3-1
df = (9 + 9 - 2)
m_tr = -3
m_pb = 1
s_tr = 1.5
s_pb = 1.8
pooled.var = (s_tr^2 * 9 + s_pb^2 * 9)/df
se.diff = sqrt(pooled.var/9 + pooled.var/9)
t.obt = mean.diff / se.diff
t.obt
p.value = 2*pt(t.obt, df=df) #two tailed
p.value
power.t.test(n=100, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
n = 100
mu = 12
z = qnorm(0.05)
sd = 4
alpha = .05
mu0 = m + z *sd /sqrt(n)
mu0 = mu + z *sd /sqrt(n)
mu0
power.t.test(n=100, delta = 12, sd = 4, type = "one.sample", alt = "one.sided")
Baseline=c(140, 138, 150, 148, 135)
Week2=c(132, 135, 151, 146, 130)
# Consider testing the hypothesis that there was a mean reduction in blood pressure?
# Give the P-value for the associated two sided test.
t.test(Baseline, Week2 , alternative = c("two.sided") ,paired = TRUE, var.equal = FALSE)
pnorm(test_z, lower.tail=FALSE)
pnorm(z, lower.tail=FALSE)
n=1787
p = 1/100
phat = 10/1787
# Standard error of p
SEp = sqrt (p*(1-p)/n)
# Test statistic
z = (p - phat) / SEp
#p-value (one sided) = P(Z < -z)
z
pnorm(z, lower.tail=FALSE)
power.t.test(power = 0.9, delta = .01, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.5, delta = .01, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.9, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.95, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.9, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$n
nm= 288
mum=44
ng=288
mug=42.04
sdm=sdg=12
mean.diff = mum - mug
df = (nm + ng - 2)
m_tr = mum
m_pb = mug
s_tr = 12
s_pb = 12
pooled.var = (s_tr^2 * nm + s_pb^2 * ng)/df
se.diff = sqrt(pooled.var/nm + pooled.var/ng)
t.obt = mean.diff / se.diff
t.obt
p.value = 2*pt(t.obt, df=df) #two tailed
p.value
st.error = sdm*sqrt(1/n + 1/n)
st.error = sdm*sqrt(1/nm + 1/ng)
z = (mum - mug)/st.error
z
p_value = 2*pnorm(-abs(z))
p_value
rounded(p_value,3)
round(p_value,3)
FER = 0.05/10
FER
library("caret", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
library(kernlab)
install.packages("knitr")
install.packages("e1071")
function (x, y, ...)
UseMethod("plot")
library("caret", lib.loc="~/R/win-library/3.1")
install.packages("caret")
library("caret", lib.loc="~/R/win-library/3.1")
library("kernlab", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
library("markdown", lib.loc="~/R/win-library/3.1")
library("e1071", lib.loc="~/R/win-library/3.1")
1e+3
1e-1
1e0
1e1
args(train.default)
library(caret); library(kernlab)
args(train.default)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
testing = mixtures[-inTrain,]
training = mixtures[ inTrain,]
hist(training$SuperPlasticizer)
plot(training$SuperPlasticizer)
plot(as.numeric(training$SuperPlasticizer))
qplot(as.numeric(training$SuperPlasticizer))
qplot(SuperPlasticizer, data=training, geom="hist")
qplot(SuperPlasticizer, data=training, geom=c("hist"))
hist(training$SuperPlasticizer)
View(training)
hist(log(SuperPlasticizer + 1))
hist(log(training$SuperPlasticizer + 1))
hist(log(training$SuperPlasticizer + 1), breaks=100)
hist(log(training$SuperPlasticizer + 1), breaks=10)
hist(log(training$SuperPlasticizer), breaks=10)
hist(log(training$SuperPlasticizer + 1), breaks=10)
hist((training$SuperPlasticizer * 100), breaks=10)
hist((training$SuperPlasticizer * 100), breaks=100)
plot(CompressiveStrength, data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
## Make a plot of the outcome (CompressiveStrength) versus the index of the samples.
plot(CompressiveStrength, data=training)
plot(training$CompressiveStrength)
## Color by each of the variables in the data set (you may find the cut2() function in the Hmisc package
library(Hmisc)
library(sna)
cutStrength=cut2(training$CompressiveStrength, g=3)
table(cutStrength)
p1=gplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=("boxplot"))
cutStrength=cut2(training$CompressiveStrength, g=4)
table(cutStrength)
cutStrength=cut2(training$CompressiveStrength, g=8)
table(cutStrength)
p1=gplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=("boxplot"))
p1=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=("boxplot"))
p1
cutStrength=cut2(training$CompressiveStrength, g=4)
table(cutStrength)
p1=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=("boxplot"))
p1
p1=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength)
p1
p1=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom="boxplot")
p1
p2=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=c("boxplot", "jitter")
gridarrange(p1, p2, ncol=2)
grid.arrange(p1, p2, ncol=2)
grid.arrange?
## Question 3
???
)
library(grid)
cutStrength=cut2(training$CompressiveStrength, g=4)
table(cutStrength)
p1=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom="boxplot")
p1
p2=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=c("boxplot", "jitter")
p2
p2
p2
p2=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=c("boxplot", "jitter")
)
p2
grid.arrange(p1, p2, ncol=2)
install.packages("gridExtra", dependencies=TRUE)
library(gridExtra)
cutStrength=cut2(training$CompressiveStrength, g=4)
table(cutStrength)
p1=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom="boxplot")
p1
p2=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=c("boxplot", "jitter"))
p2
grid.arrange(p1, p2, ncol=2)
## Load the cement data using the commands:
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
## Make a plot of the outcome (CompressiveStrength) versus the index of the samples.
plot(training$CompressiveStrength)
## First let's get the names of the columns to subset on them later
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutStrength=cut2(training$CompressiveStrength, g=4)
table(cutStrength)
ggplot(data = training, aes(y = index, x = cutStrength)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
featurePlot(x = training[, names], y = cutCS, plot = "box")
featurePlot(x = training[, names], y = cutStrength, plot = "box")
p1=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom="boxplot")
p1
p2=qplot(cutStrength, CompressiveStrength, data=training, fill=cutStrength, geom=c("boxplot", "jitter"))
p2
grid.arrange(p1, p2, ncol=2)
## Question 3
## Load the cement data using the commands:
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
## Question 3
## Load the cement data using the commands:
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = I(log(SuperPlasticizer + 1) )) + geom_histogram() + theme_bw()
)
ggplot(data = training, aes(x = (log(SuperPlasticizer + 1)) + geom_histogram() + theme_bw()
## stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
# R:It is clear that there are plenty of zeros in this parameter so taking the log base 10 would yield infinities.
ggplot(data = training, aes(x = (log(SuperPlasticizer + 1)))) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = (log(SuperPlasticizer + 1)))) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
## stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
# R:It is clear that there are plenty of zeros in this parameter so taking the log base 10 would yield infinities.
)
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
## stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
# R:It is clear that there are plenty of zeros in this parameter so taking the log base 10 would yield infinities.
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
## Question 5
# Load the Alzheimer's disease data using the commands:
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Create a training data set consisting of only the predictors with variable names beginning with IL and the diagnosis.
# Build two predictive models, one using the predictors as they are and one using PCA with principal components explaining
# 80% of the variance in the predictors.
# Use method="glm" in the train function.
# What is the accuracy of each method in the test set?
# Which is more accurate?
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
print(A1)
print(A2)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
set.seed(233)
data(AlzheimerDisease)
set.seed(233)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
set.seed(233)
adData = data.frame(diagnosis,predictors)
set.seed(233)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
set.seed(233)
data(AlzheimerDisease)
set.seed(233)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
install.packages("ElemStatLearn")
install.packages("party")
install.packages("rattle")
install.packages("rpart.plot")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
vowelTree <- randomForest(y ~ ., data = vowel.train, prox = TRUE)
library(caret)
vowelTree <- randomForest(y ~ ., data = vowel.train, prox = TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## Set the variable y to be a factor variable in both the training and test set.
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
## Then set the seed to 33833.
set.seed(33833)
## Fit (1) a random forest predictor relating the factor variable y to the remaining variables and
library(caret)
vowelTree <- randomForest(y ~ ., data = vowel.train, prox = TRUE)
install.packages("ramdomForest")
library(andomFores)
library(randomForest)
library(rpart)
## Load the vowel.train and vowel.test data sets:
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## Set the variable y to be a factor variable in both the training and test set.
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
## Then set the seed to 33833.
set.seed(33833)
## Fit (1) a random forest predictor relating the factor variable y to the remaining variables and
library(randomForest)
vowelTree <- randomForest(y ~ ., data = vowel.train, prox = TRUE)
## fit (2) a boosted predictor using the "gbm" method.
library(rpart)
vowelBoost <- gbm.fit(y ~ ., data = vowel.train)
install.packages("gbm")
library(gbm)
vowelBoost <- gbm.fit(y ~ ., data = vowel.train)
vowelBoost <- gbm(y ~ ., data = vowel.train)
## Quiz 4
### Question 1
## Load the vowel.train and vowel.test data sets:
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## Set the variable y to be a factor variable in both the training and test set.
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
## Then set the seed to 33833.
set.seed(33833)
## Fit (1) a random forest predictor relating the factor variable y to the remaining variables and
library(caret)
library(randomForest)
vowelTree <- train(y ~.,method="rf",
data=vowel.train,
trControl = trainControl(method="cv"),number=3)
pred1 <- predict(vowelTree,vowel.test);
## fit (2) a boosted predictor using the "gbm" method.
library(gbm)
vowelBoost <- train(y ~.,method="gbm",data=vowel.train)
pred2 <- predict(vowelBoost,vowel.test)
qplot(pred1,pred2,colour=wage,data=testing)
qplot(pred1,pred2,colour=wage,data=vowel.test)
qplot(pred1,pred2,colour=y,data=vowel.test)
## Fit these both with the train() command in the caret package.
predDF <- data.frame(pred1,pred2,y=testing$y)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
## What are the accuracies for the two approaches on the test data set?
sqrt(sum((pred1-vowel.test$y)^2))
sqrt(sum((pred2-vowel.test$y)^2))
sqrt(sum((combPred-vowel.test$y)^2))
predDF <- data.frame(pred1,pred2,y=factor(vowel.test$y))
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
## What are the accuracies for the two approaches on the test data set?
sqrt(sum((pred1-vowel.test$y)^2))
sqrt(sum((pred2-vowel.test$y)^2))
sqrt(sum((combPred-vowel.test$y)^2))
set.seed(33833)
## Fit (1) a random forest predictor relating the factor variable y to the remaining variables and
library(caret)
library(randomForest)
vowelTree <- train(y ~.,method="rf",
data=vowel.train,
trControl = trainControl(method="cv"),number=3)
pred1 <- predict(vowelTree,newdata=vowel.test);
confusionMatrix(pred1, vowel.test$y)
## fit (2) a boosted predictor using the "gbm" method.
library(gbm)
vowelBoost <- train(y ~.,method="gbm",data=vowel.train)
pred2 <- predict(vowelBoost,newdata=vowel.test)
confusionMatrix(pred2, vowel.test$y)
confusionMatrix(pred1, vowel.test$y)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(combPred, vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## Set the variable y to be a factor variable in both the training and test set.
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
## Then set the seed to 33833.
set.seed(33833)
## Fit (1) a random forest predictor relating the factor variable y to the remaining variables and
library(caret)
library(randomForest)
vowelTree <- train(y ~.,method="rf",
data=vowel.train,
trControl = trainControl(method="cv"),number=3)
pred1 <- predict(vowelTree,newdata=vowel.test[,-1]);
confusionMatrix(pred1, vowel.test$y)
## fit (2) a boosted predictor using the "gbm" method.
library(gbm)
vowelBoost <- train(y ~.,method="gbm",data=vowel.train)
pred2 <- predict(vowelBoost,newdata=vowel.test[,-1])
confusionMatrix(pred2, vowel.test$y)
qplot(pred1,pred2,colour=y,data=vowel.test)
## Fit these both with the train() command in the caret package.
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(combPred, vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Set the seed to 62433 and
set.seed(62433)
# predict diagnosis with all the other variables using a random forest ("rf"), boosted trees ("gbm") and linear discriminant analysis ("lda") model. Stack the predictions together using random forests ("rf"). What is the resulting accuracy on the test set? Is it better or worse than each of the individual predictions?
Fit1 <- train(diagnosis ~.,method="rf", data=training)
pred1 <- predict(Fit1,newdata=testing[,-1])
confusionMatrix(pred1, training$diagnosis)
confusionMatrix(pred1, training)
confusionMatrix(pred1, testing$diagnosis)
Fit2 <- train(diagnosis ~.,method="gbm",data=training)
pred2 <- predict(Fit2,newdata=testing[,-1])
confusionMatrix(pred2, testing$diagnosis)
Fit3 <- train(diagnosis ~.,method="lda",data=training)
pred3 <- predict(Fit3,newdata=testing[,-1])
confusionMatrix(pred3, testing$diagnosis)
predDF <- data.frame(pred1,pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(predDF, testing$diagnosis
)
confusionMatrix(predDF, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
Fit1 <- train(diagnosis ~.,method="rf", data=training)
pred1 <- predict(Fit1,newdata=testing)
confusionMatrix(pred1, testing$diagnosis)
Fit2 <- train(diagnosis ~.,method="gbm",data=training)
pred2 <- predict(Fit2,newdata=testing)
confusionMatrix(pred2, testing$diagnosis)
Fit3 <- train(diagnosis ~.,method="lda",data=training)
pred3 <- predict(Fit3,newdata=testing)
confusionMatrix(pred3, testing$diagnosis)
# Stack the predictions together using random forests ("rf").
predDF <- data.frame(pred1,pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
# What is the resulting accuracy on the test set? Is it better or worse than each of the individual predictions?
confusionMatrix(combPred, testing$diagnosis)
confusionMatrix(combPred, predDF$diagnosis)
## Getting Slidify
#- Fire up RStudio!
# - First, make sure you have devtools installed and loaded
#install.packages("devtools")
library(devtools)
library(slidify)
library(shiny)
library(ggplot2)
setwd("D:/A Developing Data Products/project/slidify/modelkm")
slidify("index.Rmd")
browse("index.html")
browseURL("index.html")
library(knitr)
